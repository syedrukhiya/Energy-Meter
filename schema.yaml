openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/buildings/:
    get:
      operationId: buildings_list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - buildings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBuildingList'
          description: ''
    post:
      operationId: buildings_create
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - buildings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Building'
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
          description: ''
  /api/buildings/{id}/:
    get:
      operationId: buildings_retrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this building.
        required: true
      tags:
      - buildings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
          description: ''
    put:
      operationId: buildings_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this building.
        required: true
      tags:
      - buildings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Building'
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
          description: ''
    patch:
      operationId: buildings_partial_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this building.
        required: true
      tags:
      - buildings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBuilding'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBuilding'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
          description: ''
    delete:
      operationId: buildings_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this building.
        required: true
      tags:
      - buildings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/devices/:
    get:
      operationId: devices_list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - devices
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDeviceList'
          description: ''
    post:
      operationId: devices_create
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - devices
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
  /api/devices/{id}/:
    get:
      operationId: devices_retrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - devices
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    put:
      operationId: devices_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - devices
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    patch:
      operationId: devices_partial_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - devices
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDevice'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: ''
    delete:
      operationId: devices_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this device.
        required: true
      tags:
      - devices
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/houses/:
    get:
      operationId: houses_list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - houses
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHouseList'
          description: ''
    post:
      operationId: houses_create
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - houses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/House'
          application/json:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
  /api/houses/{id}/:
    get:
      operationId: houses_retrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this house.
        required: true
      tags:
      - houses
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    put:
      operationId: houses_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this house.
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/House'
          application/json:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    patch:
      operationId: houses_partial_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this house.
        required: true
      tags:
      - houses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHouse'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHouse'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: ''
    delete:
      operationId: houses_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this house.
        required: true
      tags:
      - houses
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/logout/:
    post:
      operationId: logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - logout
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/password_reset/:
    post:
      operationId: password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - password_reset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/password_reset/confirm/:
    post:
      operationId: password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - password_reset
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/readings/:
    get:
      operationId: readings_list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - readings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReadingList'
          description: ''
    post:
      operationId: readings_create
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - readings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reading'
          application/json:
            schema:
              $ref: '#/components/schemas/Reading'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
          description: ''
  /api/readings/{id}/:
    get:
      operationId: readings_retrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - readings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
          description: ''
    put:
      operationId: readings_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - readings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reading'
          application/json:
            schema:
              $ref: '#/components/schemas/Reading'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
          description: ''
    patch:
      operationId: readings_partial_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - readings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReading'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReading'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
          description: ''
    delete:
      operationId: readings_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - readings
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - users
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - datatables
          - json
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Building:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: integer
        number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
      required:
      - id
      - number
      - owner
    Device:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        house:
          type: integer
        number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        location:
          $ref: '#/components/schemas/LocationEnum'
        type:
          type: string
          maxLength: 20
        last_state:
          type: string
          maxLength: 20
      required:
      - house
      - id
      - location
      - number
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    House:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        resident:
          type: integer
          nullable: true
        building:
          type: integer
        number:
          type: string
          title: Housing Unit
          maxLength: 20
      required:
      - building
      - id
      - number
      - resident
    LocationEnum:
      enum:
      - bath
      - bedroom
      - double_room
      - dining_room
      - entrance
      - hallway
      - kitchen
      - living_room
      type: string
      description: |-
        * `bath` - Bath
        * `bedroom` - Bedroom
        * `double_room` - Double Room
        * `dining_room` - Dining Room
        * `entrance` - Entrance
        * `hallway` - Hallway
        * `kitchen` - Kitchen
        * `living_room` - Living Room
    PaginatedBuildingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Building'
    PaginatedDeviceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    PaginatedHouseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/House'
    PaginatedReadingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reading'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedBuilding:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: integer
        number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
    PatchedDevice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        house:
          type: integer
        number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        location:
          $ref: '#/components/schemas/LocationEnum'
        type:
          type: string
          maxLength: 20
        last_state:
          type: string
          maxLength: 20
    PatchedHouse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        resident:
          type: integer
          nullable: true
        building:
          type: integer
        number:
          type: string
          title: Housing Unit
          maxLength: 20
    PatchedReading:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        device:
          type: integer
        serial_number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        date:
          type: string
          format: date
        reading_value:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        unit:
          type: string
          maxLength: 5
        power:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        method:
          type: string
          maxLength: 30
        battery_level:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
    Reading:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        device:
          type: integer
        serial_number:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        date:
          type: string
          format: date
        reading_value:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        unit:
          type: string
          maxLength: 5
        power:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        method:
          type: string
          maxLength: 30
        battery_level:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
      required:
      - date
      - device
      - id
      - power
      - reading_value
      - serial_number
    RoleEnum:
      enum:
      - admin
      - building_owner
      - resident
      type: string
      description: |-
        * `admin` - Resident
        * `building_owner` - Building Owner
        * `resident` - Admin
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - first_name
      - last_name
      - role
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
